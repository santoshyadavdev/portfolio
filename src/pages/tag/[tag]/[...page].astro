---
import type { PaginateFunction, Page } from 'astro'
import type { CollectionEntry } from 'astro:content'
import type { Frontmatter } from '../../../config'
import { SiteMetadata, PAGE_SIZE } from '../../../config'
import { getCollection } from 'astro:content'
import Base from '../../../layouts/base.astro'
import PageHero from '../../../components/pagehero.astro'
import BlogRoll from '../../../components/blogroll.astro'
import PaginateControl from '../../../components/paginatecontrol.astro'

export interface Props {
  page: Page<CollectionEntry<'blog'>>
}

const { tag } = Astro.params
const { page } = Astro.props

const frontmatter: Frontmatter = {
  title: 'Tag: ' + tag + (page.size < page.total ? ' (page ' + page.currentPage + ' of ' + page.lastPage + ')' : ''),
  description:
    'Showing articles ' +
    (page.start + 1) +
    '-' +
    (page.end + 1) +
    ' (total ' +
    page.total +
    ')',
  coverSVG: '../images/svg/undraw/undraw_add_notes.svg',
  socialImage: '../images/undraw/undraw_add_notes.png',
  publishDate: SiteMetadata.buildTime,
}

const currentPage = Astro.url.pathname.replace(/(\/\d*)?\/$/, '')

export async function getStaticPaths({ paginate }: { paginate: PaginateFunction }) {
  const allPosts = await getCollection('blog')
  const posts = allPosts.sort((a, b) => +b.data.publishDate - +a.data.publishDate).filter(p => !p.data.draft)

  const tags = Array.from(new Set(posts.flatMap(post => post.data.tags)))

  return tags.flatMap(tag => {
    return paginate(posts.filter(post => tag && post.data.tags?.includes(tag)), {
      params: { tag },
      pageSize: PAGE_SIZE
    })
  })
}
---

<Base frontmatter={frontmatter}>
  <header>
    <PageHero
      title={frontmatter.title}
      description={frontmatter.description}
      coverSVG={frontmatter.coverSVG}
      socialImage={frontmatter.socialImage}
    >
    <PaginateControl base={currentPage} page={page} />
  </PageHero>
  </header>
  <main class="mt-10 bg-gray-100 dark:bg-gray-900">
    <BlogRoll posts={page.data} />
  </main>
</Base>
